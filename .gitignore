# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is generally recommended to not include the config files, since they may
#  reference path names that would be invalid for other users.
.idea/

# Visual Studio Code
.vscode/

# Streamlit
.streamlit/

# Audio files (generated content)
*.mp3
*.wav
*.flac
*.aac
*.ogg
*.m4a
*.wma

# Video files
*.mp4
*.avi
*.mkv
*.mov
*.webm
*.flv

# Downloaded content directories
downloads/
stems/
separated/
output/
temp/
tmp/

# MacOS
.DS_Store
.AppleDouble
.LSOverride

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath
.recommenders
.project
.externalToolBuilders/
*.launch
.pydevproject
.cproject
.autotools
.factorypath
.buildpath
.target
.tern-project
.texlipse
.springBeans
.recommenders/
.apt_generated/
.cache-main
.scala_dependencies
.worksheet

# Linux
*~

# Logs and temporary files
*.log
*.tmp
*.temp
*.cache

# Application-specific ignores
# Temporary downloads and processing
/temp_*
/tmp_*
temp_*/
tmp_*/

# User-specific content
user_downloads/
my_music/
personal_stems/

# Configuration files that might contain sensitive info
config.json
secrets.json
.secrets
credentials.json

# Large model files (Demucs models are usually cached in user directories)
*.pth
*.pt
models/
checkpoints/

# FFmpeg temporary files
ffmpeg_*
*.ffmpeg

# Backup files
*.backup
*.bak
backup_*

# Test files
test_audio/
test_downloads/
test_output/
sample_*/

# Documentation build
_build/
_static/
_templates/

# ═══════════════════════════════════════════════════════════════════
# Music Tools Suite - Distribution & Installation Files
# ═══════════════════════════════════════════════════════════════════

# Distribution packages (created by create_distribution.sh)
dist/
*.zip
*.tar.gz
*.tgz

# Generated launcher scripts (created by install.py)
launch_music_tools.*
start_music_tools.*

# Virtual environment created by installer
music_tools_env/
music-tools-env/
venv_music_tools/

# Docker-related temporary files
.dockerignore
docker-build/
.docker/

# Installation logs and temporary files
install.log
installation.log
installer_temp/
setup_temp/

# Generated release files
RELEASE_NOTES_*.md
release_*/
packages/

# Platform-specific generated files
# Windows batch files (if generated)
*.bat.bak
# Unix shell scripts backup
*.sh.bak

# Package manager files
Pipfile
Pipfile.lock
poetry.lock
conda-env.yml
environment.yml

# CI/CD and automation
.github/workflows/
.gitlab-ci.yml
.travis.yml
.circleci/
azure-pipelines.yml

# Deployment configurations
deploy/
deployment/
k8s/
kubernetes/
helm/

# Performance and monitoring
*.prof
*.profile
performance_logs/
monitoring/

# Version and build information
VERSION
BUILD_INFO
build_number.txt
version.txt 